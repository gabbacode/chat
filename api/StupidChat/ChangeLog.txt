
Список основных проблем в коде:

api
	метод создания чата 
		кто угодно может задать любого пользователея и любую переписку

	метод получения чата
		растущий словарь Conversation, который постоянно передается "по проводам" весь

	метод ask
		нет валидации даннных, проверки на максимальный объем и различные html иньекции
		нет проверки пользователя

		ошибка Conversation нигде не инициализируется

		обычно ответ на вопрос в чате приходит не сразу, метод же взвращает ответ синхронно. 
			Либо это ошибка и нужно будет переделывать апи когда дойдет дело до получения ответов,
			Либо ошибка архитектуры ждать длительного результата внутри метода в высоконагруженном сервисе затратно и неправильно.
		
		риск потери данных чата, несколько одновременных вызовов могут
			перезаписать данные чата при смене реализации репозитория потенциальная ошибка
			потоконебезопасная структура внутри чата
			есть шанс получить notfound

		совмещение в одном методе команды и загрузки данных (нарушение cqrs)
			в итоге полная загрузка чата, только лишь для добавления одного вопроса и ответа


модель
	Неудачная структура, это не чат а список ответов, причем только в одну сторону
	Ключ словаря в чате вопрос ответ
	нет времени или порядка следования пар вопросов и ответов
	почему на один вопрос только один ответ


репозиторий
	хранить в листе плохо, 
		долгий поиск, 
		долгое удаление
		потоко опасность
	обновление заменой объекта, потенциальная ошибка подмены объекта 
	обновление не атомарное

	добавление не атомарное, есть вероятность перепутать id чата,
	потокоопасная работа с идентификатором 
	нет проверки на наличие чата, при обновлении, возможно исключение

архитектура
	не CQRS
	хранение передача и обработка одной и тойже сущности
	нехватает слоя сервисов с бизнеслогикой
	

Оптимизация
	В задании не уточняется какого рода оптимальности неоюходимо достичь:
		удовлетворить требования по отклику, с минимальными затратами на железо (кажется такой вариант подходит для чата)
			в чате летенси не очень важна, обновления можно делать с помощью внутренней очереди это позволит выполнять операции блоками, что снизит общую нагрузку

		любой ценой снизить отлик при типичном профиле нагрузки на методы
			исправить ошибки производительности и многопоточности в коде, идти в сторону lock-free

		принимать во внимание удобство поддержки и доработки сервиса (читабельность, расширябельность кода, документирование, логи)

	В том виде как реализовано сейчас нету IO, если речь о экстримальной оптимизации, то можно перейти на синхронные вызовы
	Отключить все документации свагеры мепинг контроллеров в ручную, отключение логов 
	Сериализация
	Изменение API
	Включить компрессию если действительно нужно передавать большой объем

Тесты
	нет тестов
	

Задача: 
необходимо провести анализ и исправить то, что считаете нужным. 
Основной упор при рефакторинге делайте на оптимизацию производительности. 
И обязательно опишите причины принятых решений.  


По совокупности пробем в модели, апи и логике. А так же после уточнений. Было принято решение довести все до минимально похожего на чат варианта. 

Добавлены тесты и исправлены ошибки
Вместо словаря по тексту, чат теперь может содержать одинаковые сообщения, сохраняет порядок, время и автора сообщений.
Апи содержит отдельные методы для добавления вопросов, ответа на них и просмотра вариантов.
Разделена модель хранения и dto
Оптимизирован ChatRepository
Устранены ошибки многопоточности
оптимизирован api сервис

Не стал делать:
Специальное апи для частичной загрузки чата
Отдельные dto и полное копирование чата для отправки
логику обработки ошибочных ситуаций
логи
оптимизации репозитория, буферизация изменений (другой порядок по времени)
добавлять сжатие


 https://localhost:7076/api/chats/create --method=POST -H "Content-Type: application/json" -f create.json
Bombarding https://localhost:7076/api/chats/create for 10s using 125 connection(s)
[=================================================================================================================] 10s
Done!
Statistics        Avg      Stdev        Max
  Reqs/sec     93 132.04   17 229.66  127 843.77
  Latency        1.34ms   748.22us    82.14ms
  HTTP codes:
    1xx - 0, 2xx - 933401, 3xx - 0, 4xx - 0, 5xx - 0
    others - 0
  Throughput:    36.93MB/s
